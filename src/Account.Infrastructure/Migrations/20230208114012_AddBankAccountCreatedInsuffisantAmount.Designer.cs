// <auto-generated />
using System;
using Account.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Account.Infrastructure.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20230208114012_AddBankAccountCreatedInsuffisantAmount")]
    partial class AddBankAccountCreatedInsuffisantAmount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Account.Infrastructure.AccountData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountSet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10m,
                            Balance = 1000m,
                            Date = new DateTime(2023, 2, 8, 12, 40, 11, 997, DateTimeKind.Local).AddTicks(6037)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10m,
                            Balance = 0m,
                            Date = new DateTime(2023, 2, 8, 12, 40, 11, 997, DateTimeKind.Local).AddTicks(6089)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 10m,
                            Balance = 1000m,
                            Date = new DateTime(2023, 2, 8, 12, 40, 11, 997, DateTimeKind.Local).AddTicks(6091)
                        });
                });

            modelBuilder.Entity("Account.Infrastructure.OperationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OperationSet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Type = "Deposit"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            Type = "Deposit"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            Type = "Withdrawal"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 1,
                            Type = "Withdrawal"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 1,
                            Type = "Deposit"
                        });
                });

            modelBuilder.Entity("Account.Infrastructure.OperationData", b =>
                {
                    b.HasOne("Account.Infrastructure.AccountData", "AccountData")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountData");
                });

            modelBuilder.Entity("Account.Infrastructure.AccountData", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
